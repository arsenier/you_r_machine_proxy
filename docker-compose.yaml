version: '3'

services:
  api.gateway:
    container_name: api.gateway
    build:
      context: .
    volumes:
      - ./build/nginx.conf:/etc/nginx/nginx.conf
    env_file:
      - .env
    networks:
      - app
    ports:
      - '${API_GATEWAY_PORT:-8000}:8000'

  game:
    container_name: you_r_machine_game
    image: arsenier/yrm_godot:v1.1
    networks:
      - app
    ports:
      - 127.0.0.1:80:8000
    restart: always
    # expose:
    #   - "8000"

  ms.leaderboard:
    container_name: ms.leaderboard
    image: arsenier/yrm_leaderboard:${MS_LEADERBOARD_VERSION}
    # environment:
    #   - "DB_DATABASE=${DB_DATABASE_MS_LEADERBOARD}"
    # env_file:
    #   - .env
    volumes:
      - ../you_r_machine_leaderboard/db:/app/db
    networks:
      - app
    # links:
    #   - pgsql
    restart: always
    expose:
      - "8000"

  ms.auth:
    container_name: ms.auth
    image: arsenier/yrm_auth:${MS_AUTH_VERSION}
    # environment:
    #   - "DB_DATABASE=${DB_DATABASE_MS_AUTH}"
    # env_file:
    #   - .env
    volumes:
      - ../you_r_machine_auth/db:/app/db
    networks:
      - app
    # links:
    #   - pgsql
    restart: always
    expose:
      - "8000"

  # pgsql:
  #   container_name: pgsql
  #   image: 'postgres:13'
  #   ports:
  #     - '${FORWARD_DB_PORT:-5432}:5432'
  #   env_file:
  #     - .env
  #   volumes:
  #     - 'apppgsql:/var/lib/postgresql/data'
  #   networks:
  #     - app
  #   healthcheck:
  #     test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
  #     retries: 3
  #     timeout: 5s

networks:
  app:
    driver: bridge

volumes:
  apppgsql:
    driver: local